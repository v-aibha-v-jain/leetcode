632. Smallest Range Covering Elements from K Lists

You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
 

Constraints:

nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-105 <= nums[i][j] <= 105
nums[i] is sorted in non-decreasing order.




about treemap

The TreeMap in the provided code is used to efficiently store and retrieve elements based on their natural order. It's a sorted associative map implementation that maintains its elements in ascending order of their keys.

Key points about the TreeMap in this code:
- Sorted keys: The keys of the TreeMap are integers, which are naturally ordered. This means that the elements will be stored and retrieved in ascending order based on their integer keys.
- Efficient retrieval: The TreeMap uses a balanced tree structure (typically a red-black tree) to ensure efficient retrieval of elements. This allows for logarithmic time complexity for operations like get, put, and containsKey.
- Index storage: The TreeMap stores the index of each element as the value associated with its key. This allows us to keep track of which lists each element belongs to.
- Sliding window: The TreeMap is used to efficiently find the smallest range of elements that includes elements from all lists. The sliding window approach iterates through the sorted keys, maintaining a count of the elements from each list within the current window. When all elements are included, the window size is checked and updated if necessary.

Specific usage in the code:
- Initialization: The TreeMap is initialized to store Integer keys and List<Integer> values.
- Element storage: For each element in the input lists, the TreeMap is used to store the element's value as a key and the index of its list as a value. If the key already exists, the index is added to the existing list.
- Sorted list creation: A sorted list of keys is created from the TreeMap's key set.
- Sliding window: The sliding window algorithm iterates through the sorted list, using the TreeMap to efficiently find the elements within the current window and update the count of elements from each list.
- Range update: If the current window includes elements from all lists and has a smaller range than the previously found range, the range is updated.

Overall, the TreeMap in this code is a crucial data structure for efficiently managing the sorted elements and finding the smallest range that includes elements from all lists. Its sorted nature and efficient retrieval operations make it well-suited for this task.